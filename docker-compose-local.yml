# running docker-compose has requirements => make server.network
# docker network create netpublic
# docker-compose build --no-cache --pull && docker-compose up --force-recreate

version: "3.9"
services:
  traefik:
    image: traefik:${TRAEFIK_VERSION}
    env_file: .env
    ports:
      - 80:80
      - 443:443
    hostname: traefik
    container_name: traefik
    environment:
      - DOMAIN_VHOST_ROOT=${DOMAIN_VHOST_ROOT}
      - DOMAIN_VHOST_BOARD=${DOMAIN_VHOST_BOARD}
      - DOMAIN_VHOST_WEB=${DOMAIN_VHOST_WEB}
      - DOMAIN_VHOST_API=${DOMAIN_VHOST_API}
      - DOMAIN_VHOST_APP=${DOMAIN_VHOST_APP}
      - TRAEFIK_SSLEMAIL=${TRAEFIK_SSLEMAIL}
      - TRAEFIK_BASIC_AUTH_USER_PASSWORD=${TRAEFIK_BASIC_AUTH_USER_PASSWORD}
      - TZ=${TIMEZONE}
    command:
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.docker
      # Do not expose containers unless explicitly told so
      - --providers.docker.exposedByDefault=false
      - --api
      - --certificatesresolvers.le.acme.email=${TRAEFIK_SSLEMAIL?Variable not set}
      - --certificatesresolvers.le.acme.storage=./acme.json
      - --certificatesresolvers.le.acme.tlschallenge=true
      - "--certificatesresolvers.le.acme.caserver=https://acme-staging-v02.api.le.org/directory"
      - "--certificatesResolvers.le.acme.tlschallenge=true"
      - "--accesslog=true"
      - "--log.level=DEBUG"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./acme.json:/acme.json"
    labels:
      - "traefik.enable=true"
      # Dashboard
      - "traefik.http.routers.traefik.rule=Host(`${DOMAIN_VHOST_BOARD}`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=le"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.middlewares=authtraefik"
      - "traefik.http.middlewares.authtraefik.basicauth.users=${TRAEFIK_BASIC_AUTH_USER_PASSWORD}"
      # global redirect to https
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      # middleware redirect
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
    restart: unless-stopped
    networks:
      - netpublic

  db:
    image: mariadb:10.6.11
    volumes:
      - ./data/mariadb:/var/lib/mysql
    env_file: .env

  apiserver:
    hostname: apiserver
    container_name: apiserver
    env_file: .env
    build:
      context: backend
      args:
        - PYTHON_VERSION=${PYTHON_VERSION}
      dockerfile: dockerfile-apiserver-local
    working_dir: /app
    volumes:
      - ./backend:/app
    ports:
      - ${API_SERVER_PORT_EXTERNAL}:${API_SERVER_PORT_INTERNAL}
    environment:
      - FLASK_APP=${FLASK_APP}
      - FLASK_DEBUG=${FLASK_DEBUG}
      - SERVICE_LOG=${SERVICE_LOG}
      - APPLICATION_HOST=${APPLICATION_HOST}
      - APPLICATION_PORT=${APPLICATION_PORT}
      - DOMAIN_VHOST_ROOT=${DOMAIN_VHOST_ROOT}
      - DOMAIN_VHOST_BOARD=${DOMAIN_VHOST_BOARD}
      - DOMAIN_VHOST_WEB=${DOMAIN_VHOST_WEB}
      - DOMAIN_VHOST_API=${DOMAIN_VHOST_API}
      - DOMAIN_VHOST_APP=${DOMAIN_VHOST_APP}
      - TZ=${TIMEZONE}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.apiserver.rule=Host(`${DOMAIN_VHOST_API}`)"
      - "traefik.http.routers.apiserver.entrypoints=websecure"
      - "traefik.http.routers.apiserver.tls=true"
      - "traefik.http.routers.apiserver.tls.certresolver=le"
      - "traefik.http.routers.apiserver.tls.domains[0].main=${DOMAIN_VHOST_API}"
      - "traefik.http.services.apiserver.loadbalancer.server.port=${API_SERVER_PORT_INTERNAL}"
    command: flask run --host ${APPLICATION_HOST} --port ${API_SERVER_PORT_INTERNAL} --debugger --with-threads
    depends_on:
      - db
    networks:
      - netpublic

  vhostwww:
    build:
      context: frontend/www
      args:
        - NODE_VERSION=${NODE_VERSION}
      dockerfile: dockerfile-vhostwww-local
    env_file: .env
    #environment:
      #- NODE_ENV="development"
      # The base node image sets a very verbose log level. => ENV NPM_CONFIG_LOGLEVEL warn
      #- NPM_CONFIG_LOGLEVEL warn
    ports:
      - "${WEB_SERVER_PORT_EXTERNAL}:${WEB_SERVER_PORT_INTERNAL}"
      - "${WEB_HMR_SERVER_PORT_EXTERNAL}:${WEB_HMR_SERVER_PORT_INTERNAL}"
    volumes:
      - "./frontend/www:/app"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vhostwww.rule=Host(`${DOMAIN_VHOST_WEB}`)"
      - "traefik.http.routers.vhostwww.entrypoints=websecure"
      - "traefik.http.routers.vhostwww.tls=true"
      - "traefik.http.routers.vhostwww.tls.certresolver=le"
      - "traefik.http.routers.vhostwww.tls.domains[0].main=${DOMAIN_VHOST_WEB}"
      - "traefik.http.services.vhostwww.loadbalancer.server.port=${WEB_SERVER_PORT_INTERNAL}"
    command: sh -c "cd /app && npm install -g pnpm && pnpm install && pnpm dev"
    # depends_on:
    #  - apiserver
    networks:
      - netpublic

  vhostapp:
    build:
      context: frontend/app
      args:
        - NODE_VERSION=${NODE_VERSION}
      dockerfile: dockerfile-vhostapp-local
    env_file: .env
    ports:
      - "${APP_SERVER_PORT_EXTERNAL}:${APP_SERVER_PORT_INTERNAL}"
      - "${APP_HMR_SERVER_PORT_EXTERNAL}:${APP_HMR_SERVER_PORT_INTERNAL}"
    volumes:
      - "./frontend/app:/app"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vhostapp.rule=Host(`${DOMAIN_VHOST_APP}`)"
      - "traefik.http.routers.vhostapp.entrypoints=websecure"
      - "traefik.http.routers.vhostapp.tls=true"
      - "traefik.http.routers.vhostapp.tls.certresolver=le"
      - "traefik.http.routers.vhostapp.tls.domains[0].main=${DOMAIN_VHOST_APP}"
      - "traefik.http.services.vhostapp.loadbalancer.server.port=${APP_SERVER_PORT_INTERNAL}"
    command: sh -c "cd /app && npm install -g pnpm && pnpm install && pnpm dev"
    # depends_on:
    #  - apiserver
    networks:
      - netpublic

  vhostbackoffice:
    build:
      context: frontend/backoffice
      args:
        - NODE_VERSION=${NODE_VERSION}
      dockerfile: dockerfile-vhostbackoffice-local
    env_file: .env
    ports:
      - "${BACKOFFICE_SERVER_PORT_EXTERNAL}:${BACKOFFICE_SERVER_PORT_INTERNAL}"
    volumes:
      - "./frontend/backoffice:/app"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vhostbackoffice.rule=Host(`${DOMAIN_VHOST_BACKOFFICE}`)"
      - "traefik.http.routers.vhostbackoffice.entrypoints=websecure"
      - "traefik.http.routers.vhostbackoffice.tls=true"
      - "traefik.http.routers.vhostbackoffice.tls.certresolver=le"
      - "traefik.http.routers.vhostbackoffice.tls.domains[0].main=${DOMAIN_VHOST_BACKOFFICE}"
      - "traefik.http.services.vhostbackoffice.loadbalancer.server.port=${BACKOFFICE_SERVER_PORT_INTERNAL}"
    command: sh -c "cd /app && npm install -g pnpm && pnpm install && pnpm dev"
    # depends_on:
    #  - apiserver
    networks:
      - netpublic

#  appserver:
#    image: containous/whoami:v1.5.0
#    hostname: appserver
#    container_name: appserver
#    env_file: .env
#    restart: unless-stopped
#    environment:
#      - DOMAIN_VHOST_APP=${DOMAIN_VHOST_APP}
#      - TZ=${TIMEZONE}
#    labels:
#      - "traefik.enable=true"
#      - "traefik.http.routers.appserver.rule=Host(`${DOMAIN_VHOST_APP}`)"
#      - "traefik.http.routers.appserver.entrypoints=websecure"
#      - "traefik.http.routers.appserver.tls=true"
#      - "traefik.http.routers.appserver.tls.certresolver=le"
#      - "traefik.http.routers.appserver.tls.domains[0].main=${DOMAIN_VHOST_APP}"
#    networks:
#      - netpublic

#  webserver:
#    image: nginx/1.23.3
#    hostname: webserver
#    container_name: webserver
#    env_file: .env
#    build:
#      context: ./frontend
#      args:
#        - NGINX_VERSION=${NGINX_VERSION}
#      dockerfile: dockerfile-webserver-dev
##    working_dir: /www
##    #volumes:
##    #  - ./frontend:/www
##    restart: unless-stopped
##    environment:
##      - DOMAIN_VHOST_WEB=${DOMAIN_VHOST_WEB}
##      - TZ=${TIMEZONE}
#    labels:
#      - "traefik.enable=true"
#      - "traefik.http.routers.webserver.rule=Host(`${DOMAIN_VHOST_WEB}1`)"
#      - "traefik.http.routers.webserver.entrypoints=websecure"
#      - "traefik.http.routers.webserver.tls=true"
#      - "traefik.http.routers.webserver.tls.certresolver=le"
#      - "traefik.http.routers.webserver.tls.domains[0].main=${DOMAIN_VHOST_WEB}1"
#    networks:
#      - netpublic

  toolsserver:
    image: busybox

#  testserver:
#    env_file: ../.env
#    image: python:3.10
#    working_dir: /app
#    volumes:
#      - ./backend:/app
#    depends_on:
#      - testdb
#    ports:
#      - 5053:5053
#    environment:
#      APPLICATION_PORT: 5053
#      APPLICATION_DB_CONTAINER: testdb
#    command: python -m pytest test/
#    networks:
#      - netpublic
#
#  testdb:
#    image: oraclelinux:8-slim
#    networks:
#      - netpublic

networks:
  netpublic:
    external: true
  netprivate:
    external: false